{"version":3,"sources":["Player_1.js"],"names":["cc","Class","extends","Component","properties","Map","default","type","Node","displayName","onLoad","Node_Animation","Player_to_obstacle","start","TiledLayer","find","getComponent","Walking_Lattice","map_TileSize","getMapTileSize","TurnStatic","TurnUp","TurnRight","TurnDown","TurnLeft","update","dt","anim","node","Animation","animState1","getAnimationState","getClips","name","playing1","isPlaying","animState2","playing2","animState3","playing3","animState4","playing4","stop","newVec2","convertToWorldSpaceAR","v2","height","newVec3","convertToNodeSpaceAR","tile_X","Math","ceil","x","width","tile_Y","y","tileGid","getTileGIDAt","play"],"mappings":"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","file":"Player_1.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\resources\\Prefab\\Player","sourcesContent":["﻿cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        Map: {\r\n            default: null,\r\n            type: cc.Node,\r\n            displayName: \"运动目标地图\"\r\n        }\r\n    },\r\n    \r\n    onLoad() {\r\n        this.Node_Animation = 0;\r\n        //物理组件开启\r\n        //cc.director.getPhysicsManager().enabled = true;\r\n        //cc.director.getPhysicsManager().debugDrawFlags = 0;\r\n        //cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |\r\n        //                                            cc.PhysicsManager.DrawBits.e_pairBit |\r\n        //                                            cc.PhysicsManager.DrawBits.e_centerOfMassBit |\r\n        //                                            cc.PhysicsManager.DrawBits.e_jointBit |\r\n        //                                            cc.PhysicsManager.DrawBits.e_shapeBit;\r\n\r\n        this.Player_to_obstacle = false;\r\n    },\r\n\r\n    start () {\r\n        this.TiledLayer = cc.find(\"Canvas/Map/tiledmap/Walking_Lattice\").getComponent(cc.TiledLayer);\r\n        this.Walking_Lattice = cc.find(\"Canvas/Map/tiledmap/Walking_Lattice\");\r\n        this.map_TileSize = this.TiledLayer.getMapTileSize();\r\n    },\r\n    TurnStatic() {\r\n        this.Node_Animation = 0;\r\n    },\r\n    TurnUp() {\r\n        this.Node_Animation = 1;\r\n    },\r\n    TurnRight() {\r\n        this.Node_Animation = 2;\r\n    },\r\n    TurnDown() {\r\n        this.Node_Animation = 3;\r\n    },\r\n    TurnLeft() {\r\n        this.Node_Animation = 4;\r\n    },\r\n    update(dt) {\r\n        //获取动画列表\r\n        let anim = this.node.getComponent(cc.Animation);\r\n        //获取是否在播放动画，播放哪个动画\r\n        //上\r\n        let animState1 = anim.getAnimationState(anim.getClips()[0].name);\r\n        let playing1 = animState1.isPlaying;\r\n        //右\r\n        let animState2 = anim.getAnimationState(anim.getClips()[1].name);\r\n        let playing2 = animState2.isPlaying;\r\n        //下\r\n        let animState3 = anim.getAnimationState(anim.getClips()[2].name);\r\n        let playing3 = animState3.isPlaying;\r\n        //左\r\n        let animState4 = anim.getAnimationState(anim.getClips()[3].name);\r\n        let playing4 = animState4.isPlaying;\r\n        //行走动画播放\r\n        if (this.Node_Animation == 0) {\r\n            anim.stop();\r\n        };\r\n        if (this.Node_Animation == 1) {\r\n            //let force = cc.v2(0, -1000);\r\n            //this.Map.getComponent(cc.RigidBody).applyForceToCenter(force);\r\n            //let newVec2 = cc.find(\"Canvas\").convertToWorldSpaceAR(cc.v2(0, this.node.height));\r\n            //let collider = cc.director.getPhysicsManager().testPoint(newVec2);\r\n            //cc.log('newVec2: ' + newVec2 + 'obstacle: ' + cc.find(\"Canvas/Map/obstacle\").getComponent(cc.RigidBody).getWorldPosition());\r\n            //if (collider) {\r\n            //    cc.log('newVec2: ' + newVec2 + 'obstacle: ' + cc.find(\"Canvas/Map/win_white\").getComponent(cc.RigidBody).getWorldPosition());\r\n            //    cc.log('name: ' + collider.node.name);\r\n            //    if (collider.node.name == 'obstacle') {\r\n            //        this.Player_to_obstacle = true;\r\n            //    }\r\n            //}\r\n\r\n            let newVec2 = cc.find(\"Canvas\").convertToWorldSpaceAR(cc.v2(0, this.map_TileSize.height));\r\n            let newVec3 = cc.find(\"Canvas/Map\").convertToNodeSpaceAR(newVec2);\r\n            let tile_X = Math.ceil((newVec3.x + this.Walking_Lattice.width / 2) / this.map_TileSize.width) - 1;\r\n            let tile_Y = Math.ceil((this.Walking_Lattice.height / 2 - newVec3.y) / this.map_TileSize.height) - 1;\r\n            let tileGid = this.TiledLayer.getTileGIDAt(tile_X, tile_Y);\r\n            //cc.log('tileGid_is: (' + tile_X + ',' + tile_Y + ')' + tileGid);\r\n            if (tileGid) {\r\n                this.Player_to_obstacle = false;\r\n            } else {\r\n                this.Player_to_obstacle = true;\r\n            }\r\n            if (!this.Player_to_obstacle) {\r\n                this.Map.y += -200 * dt;\r\n            };\r\n            if (!playing1) {\r\n                anim.play(anim.getClips()[0].name);\r\n            };\r\n        };\r\n        if (this.Node_Animation == 2) {\r\n            let newVec2 = cc.find(\"Canvas\").convertToWorldSpaceAR(cc.v2(this.map_TileSize.width, 0));\r\n            let newVec3 = cc.find(\"Canvas/Map\").convertToNodeSpaceAR(newVec2);\r\n            let tile_X = Math.ceil((newVec3.x + this.Walking_Lattice.width / 2) / this.map_TileSize.width) - 1;\r\n            let tile_Y = Math.ceil((this.Walking_Lattice.height / 2 - newVec3.y) / this.map_TileSize.height) - 1;\r\n            let tileGid = this.TiledLayer.getTileGIDAt(tile_X, tile_Y);\r\n            if (tileGid) {\r\n                this.Player_to_obstacle = false;\r\n            } else {\r\n                this.Player_to_obstacle = true;\r\n            };\r\n            if (!this.Player_to_obstacle) {\r\n                this.Map.x += -200 * dt;\r\n            };\r\n            if (!playing2) {\r\n                anim.play(anim.getClips()[1].name);\r\n            };\r\n        };\r\n        if (this.Node_Animation == 3) {\r\n            let newVec2 = cc.find(\"Canvas\").convertToWorldSpaceAR(cc.v2(0, -this.map_TileSize.height));\r\n            let newVec3 = cc.find(\"Canvas/Map\").convertToNodeSpaceAR(newVec2);\r\n            let tile_X = Math.ceil((newVec3.x + this.Walking_Lattice.width / 2) / this.map_TileSize.width) - 1;\r\n            let tile_Y = Math.ceil((this.Walking_Lattice.height / 2 - newVec3.y) / this.map_TileSize.height) - 1;\r\n            let tileGid = this.TiledLayer.getTileGIDAt(tile_X, tile_Y);\r\n            if (tileGid) {\r\n                this.Player_to_obstacle = false;\r\n            } else {\r\n                this.Player_to_obstacle = true;\r\n            };\r\n            if (!this.Player_to_obstacle) {\r\n                this.Map.y += 200 * dt;\r\n            };\r\n            if (!playing3) {\r\n                anim.play(anim.getClips()[2].name);\r\n            };\r\n        };\r\n        if (this.Node_Animation == 4) {\r\n            let newVec2 = cc.find(\"Canvas\").convertToWorldSpaceAR(cc.v2(-this.map_TileSize.width, 0));\r\n            let newVec3 = cc.find(\"Canvas/Map\").convertToNodeSpaceAR(newVec2);\r\n            let tile_X = Math.ceil((newVec3.x + this.Walking_Lattice.width / 2) / this.map_TileSize.width) - 1;\r\n            let tile_Y = Math.ceil((this.Walking_Lattice.height/2 - newVec3.y) / this.map_TileSize.height) - 1;\r\n            let tileGid = this.TiledLayer.getTileGIDAt(tile_X, tile_Y);\r\n            if (tileGid) {\r\n                this.Player_to_obstacle = false;\r\n            } else {\r\n                this.Player_to_obstacle = true;\r\n            };\r\n            if (!this.Player_to_obstacle) {\r\n                this.Map.x += 200 * dt;\r\n            };\r\n            if (!playing4) {\r\n                anim.play(anim.getClips()[3].name);\r\n            };\r\n        };\r\n        //cc.find('Canvas/Map/obstacle').getComponent(cc.RigidBody).syncPosition(true);\r\n    },\r\n});\r\n"]}